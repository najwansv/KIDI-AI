import http.server
import socketserver
from threading import Thread
from flask import Flask, Response, request
from flask_cors import CORS
import subprocess
import cv2
import os

# Specify the directory containing your web files
DIRECTORY = "Dashboard"
PORT = 80  # Port for serving the HTML

# Flask app for backend
app = Flask(__name__)
CORS(app)

# Global variables
streaming = False  # Flag to control streaming
ai_mode = None  # AI mode
scripts = {
    'noAI': 'NonAI.py',  # Script for noAI mode
    'AI1': 'AI1.py',     # Script for AI1 mode
    'AI2': 'AI2.py',     # Script for AI2 mode
    'AI3': 'AI3.py',     # Script for AI3 mode
    'AI4': 'AI4.py',     # Script for AI4 mode
}

# Function to stream output from a Python script
def stream_script_output(script_path):
    """Stream video frames generated by a Python script."""
    print(f"Executing script: {script_path}")

    # Ensure the script exists
    if not os.path.exists(script_path):
        print(f"Script not found: {script_path}")
        return

    # Execute the script
    process = subprocess.Popen(
        ['python', script_path],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        bufsize=1,
        universal_newlines=True
    )

    try:
        # Stream frames from the script's output
        for line in process.stdout:
            line = line.strip()
            if line.startswith("FRAME:"):
                # Assume the script outputs frames as base64-encoded images
                frame_data = line.replace("FRAME:", "")
                yield (b'--frame\r\n'
                       b'Content-Type: image/jpeg\r\n\r\n' + base64.b64decode(frame_data) + b'\r\n')
    finally:
        process.terminate()  # Ensure the process is stopped
        process.wait()


@app.route('/start_streaming', methods=['POST'])
def start_streaming():
    global streaming, ai_mode
    ai_mode = request.form.get('ai_mode')  # Default to 'noAI' if not provided
    print(f"Streaming selected mode: {ai_mode}")

    if streaming:  # Check if streaming is already running
        return "Streaming is already running", 400

    if ai_mode not in scripts:
        return "Invalid AI mode", 400

    streaming = True
    return "Streaming started", 200


@app.route('/stop_streaming', methods=['POST'])
def stop_streaming():
    global streaming
    if streaming:
        streaming = False
        return "Streaming stopped", 200
    return "No streaming process to stop", 400


@app.route('/video_feed')
def video_feed():
    global ai_mode, streaming
    if not streaming:
        return "Streaming is stopped", 400

    # Ensure valid AI mode
    if ai_mode not in scripts:
        return "Invalid AI mode", 400

    script_path = scripts[ai_mode]
    print(f"Streaming using script: {script_path}")
    return Response(stream_script_output(script_path), mimetype='multipart/x-mixed-replace; boundary=frame')


@app.route('/update_ai_mode', methods=['POST'])
def update_ai_mode():
    global ai_mode
    new_ai_mode = request.form.get('ai_mode')
    if new_ai_mode not in scripts:
        return "Invalid AI mode", 400

    ai_mode = new_ai_mode
    print(f"AI Mode updated to: {ai_mode}")
    return "AI mode updated", 200


# Start the Flask server in a separate thread
def start_flask():
    app.run(port=5001)  # Port for Flask API


# Custom HTTP server handler
class CustomHandler(http.server.SimpleHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, directory=DIRECTORY, **kwargs)


# Start the HTTP server
def start_http_server():
    with socketserver.TCPServer(("", PORT), CustomHandler) as httpd:
        print(f"Serving HTTP on localhost:{PORT} (http://127.0.0.1:{PORT})")
        httpd.serve_forever()


# Run both servers
if __name__ == "__main__":
    Thread(target=start_flask).start()
    start_http_server()
